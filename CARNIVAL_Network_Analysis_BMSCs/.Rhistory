GSE87073 <- read.csv("data/pc/GSE87073 Normalized.Filtered(ID).Annotated.Data.csv")
###
GSE87073 <- read.csv("data/GSE87073 Normalized.Filtered(ID).Annotated.Data.csv")
View(GSE87073)
GSE87073_dataset <- GSE87073[,3:13]
names(GSE87073_dataset)[1] <- "Symbol"
sum(duplicated(GSE87073_dataset$Symbol))
targets_GSE87073 <- as.data.frame(matrix(NA,10,2))
names(targets_GSE87073) <- c("sample","condition")
targets_GSE87073$sample <- names(GSE87073[,-c(1:3)])
targets_GSE87073$condition <- c("HD","HD","HD","HD","HD","MM","MM","MM","MM","MM")
# set working directory
setwd("~/Documents/MM_Pain_Network/BMSC")
####################### Import packages and functions
library(readr)
library(vsn)
library(limma)
library(progeny)
library(dorothea)
library(tibble)
library(tidyr)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(reshape)
library(gridExtra)
library(grid)
library(cowplot)
library(ggrepel)
library(hexbin)
library(visNetwork)
library(CARNIVAL)
library(OmnipathR)
library(scales)
library(data.table)
source("scripts/support_functions.R")
source("scripts/assignPROGENyScores.r")
source("scripts/generateTFList.r")
source("scripts/carnival_visNetwork.r")
source("scripts/support_enrichment.r")
source("scripts/support_networks.r")
GSE36474 <- read.csv("data/GSE36474 Normalized.Filtered(ID).Annotated.Data.csv")
GSE36474_dataset <- GSE36474[,3:10]
names(GSE36474_dataset)[1] <- "Symbol"
sum(duplicated(GSE36474_dataset$Symbol))
targets_GSE36474<- as.data.frame(matrix(NA,7,2))
names(targets_GSE36474) <- c("sample","condition")
targets_GSE36474$sample <- names(GSE36474[,-c(1:3)])
targets_GSE36474$condition <- c("HD","HD","HD","MM","MM","MM","MM")
###
GSE46053_Coculture <- read.csv("data/GSE46053 Coculture Normalized.Filtered(ID).Annotated.Data.csv")
GSE46053_Coculture_dataset <- GSE46053_Coculture[,3:19]
names(GSE46053_Coculture_dataset)[1] <- "Symbol"
sum(duplicated(GSE46053_Coculture_dataset$Symbol))
targets_GSE46053_Coculture <- as.data.frame(matrix(NA,16,2))
names(targets_GSE46053_Coculture) <- c("sample","condition")
targets_GSE46053_Coculture$sample <- names(GSE46053_Coculture[,-c(1:3)])
targets_GSE46053_Coculture$condition <- c("HD","HD","HD","HD","HD","HD","HD","HD","MM","MM","MM","MM","MM","MM","MM","MM")
###
GSE78235 <- read.csv("data/GSE78235 Normalized.Filtered(ID).Annotated.Data.csv")
GSE78235_dataset <- GSE78235[,3:9]
names(GSE78235_dataset)[1] <- "Symbol"
sum(duplicated(GSE78235_dataset$Symbol))
targets_GSE78235 <- as.data.frame(matrix(NA,6,2))
names(targets_GSE78235) <- c("sample","condition")
targets_GSE78235$sample <- names(GSE78235[,-c(1:3)])
targets_GSE78235$condition <- c("HD","HD","HD","HD","MM","MM")
###
GSE80608  <- read.csv("data/GSE80608 Normalized.Filtered(ID).Annotated.Data.csv")
GSE80608_dataset <- GSE80608[,3:23]
names(GSE80608_dataset)[1] <- "Symbol"
sum(duplicated(GSE80608_dataset$Symbol))
targets_GSE80608 <- as.data.frame(matrix(NA,20,2))
names(targets_GSE80608) <- c("sample","condition")
targets_GSE80608$sample <- names(GSE80608[,-c(1:3)])
targets_GSE80608$condition <- c("HD","HD","HD","HD","HD","HD","HD","HD","HD","HD","MM","MM","MM","MM","MM","MM","MM","MM","MM","MM")
###
GSE87073 <- read.csv("data/GSE87073 Normalized.Filtered(ID).Annotated.Data.csv")
GSE87073_dataset <- GSE87073[,3:13]
names(GSE87073_dataset)[1] <- "Symbol"
sum(duplicated(GSE87073_dataset$Symbol))
targets_GSE87073 <- as.data.frame(matrix(NA,10,2))
names(targets_GSE87073) <- c("sample","condition")
targets_GSE87073$sample <- names(GSE87073[,-c(1:3)])
targets_GSE87073$condition <- c("HD","HD","HD","HD","HD","MM","MM","MM","MM","MM")
rm(GSE80608_dataset,GSE87073_dataset,GSE46053_Coculture_dataset,GSE78235_dataset,GSE36474_dataset)
# load pc meta-analysis data
load("data/data_string_PC_BMSC_220613.RData")
View(merged_analysis_BMSC_5DS_ID_all)
bmsc_meta.analysis <- merged_analysis_BMSC_5DS_ID_all[,c(18,3)]
sum(duplicated(bmsc_meta.analysis$hgnc_symbol))
bmsc_meta.analysis <- data.frame(bmsc_meta.analysis %>%
group_by(hgnc_symbol) %>%
summarise_all(funs(max)))
bmsc_meta.analysis_symbol <- bmsc_meta.analysis$hgnc_symbol
# filter normalized counts file by genes in bmsc meta-analysis
normalized_counts <- normalized_counts[bmsc_meta.analysis_symbol, ]
ls()
##
targets <- list(targets_GSE36474, targets_GSE46053_Coculture, targets_GSE78235, targets_GSE78235, targets_GSE80608,targets_GSE87073)
targets <- rbindlist(targets)
rm(targets_GSE36474, targets_GSE46053_Coculture, targets_GSE78235, targets_GSE78235, targets_GSE80608,targets_GSE87073)
View(targets)
rm(targets_GSE36474, targets_GSE46053_Coculture, targets_GSE78235, targets_GSE80608,targets_GSE87073)
View(GSE36474)
# set working directory
setwd("~/Documents/MM_Pain_Network/BMSC")
####################### Import packages and functions
library(readr)
library(vsn)
library(limma)
library(progeny)
library(dorothea)
library(tibble)
library(tidyr)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(reshape)
library(gridExtra)
library(grid)
library(cowplot)
library(ggrepel)
library(hexbin)
library(visNetwork)
library(CARNIVAL)
library(OmnipathR)
library(scales)
library(data.table)
source("scripts/support_functions.R")
source("scripts/assignPROGENyScores.r")
source("scripts/generateTFList.r")
source("scripts/carnival_visNetwork.r")
source("scripts/support_enrichment.r")
source("scripts/support_networks.r")
GSE36474 <- read.csv("data/GSE36474 Normalized.Filtered(ID).Annotated.Data.csv")
GSE36474_dataset <- GSE36474[,3:10]
names(GSE36474_dataset)[1] <- "Symbol"
sum(duplicated(GSE36474_dataset$Symbol))
targets_GSE36474<- as.data.frame(matrix(NA,7,2))
names(targets_GSE36474) <- c("sample","condition")
targets_GSE36474$sample <- names(GSE36474[,-c(1:3)])
targets_GSE36474$condition <- c("HD","HD","HD","MM","MM","MM","MM")
###
GSE46053_Coculture <- read.csv("data/GSE46053 Coculture Normalized.Filtered(ID).Annotated.Data.csv")
GSE46053_Coculture_dataset <- GSE46053_Coculture[,3:19]
names(GSE46053_Coculture_dataset)[1] <- "Symbol"
sum(duplicated(GSE46053_Coculture_dataset$Symbol))
targets_GSE46053_Coculture <- as.data.frame(matrix(NA,16,2))
names(targets_GSE46053_Coculture) <- c("sample","condition")
targets_GSE46053_Coculture$sample <- names(GSE46053_Coculture[,-c(1:3)])
targets_GSE46053_Coculture$condition <- c("HD","HD","HD","HD","HD","HD","HD","HD","MM","MM","MM","MM","MM","MM","MM","MM")
###
GSE78235 <- read.csv("data/GSE78235 Normalized.Filtered(ID).Annotated.Data.csv")
GSE78235_dataset <- GSE78235[,3:9]
names(GSE78235_dataset)[1] <- "Symbol"
sum(duplicated(GSE78235_dataset$Symbol))
targets_GSE78235 <- as.data.frame(matrix(NA,6,2))
names(targets_GSE78235) <- c("sample","condition")
targets_GSE78235$sample <- names(GSE78235[,-c(1:3)])
targets_GSE78235$condition <- c("HD","HD","HD","HD","MM","MM")
###
GSE80608  <- read.csv("data/GSE80608 Normalized.Filtered(ID).Annotated.Data.csv")
GSE80608_dataset <- GSE80608[,3:23]
names(GSE80608_dataset)[1] <- "Symbol"
sum(duplicated(GSE80608_dataset$Symbol))
targets_GSE80608 <- as.data.frame(matrix(NA,20,2))
names(targets_GSE80608) <- c("sample","condition")
targets_GSE80608$sample <- names(GSE80608[,-c(1:3)])
targets_GSE80608$condition <- c("HD","HD","HD","HD","HD","HD","HD","HD","HD","HD","MM","MM","MM","MM","MM","MM","MM","MM","MM","MM")
###
GSE87073 <- read.csv("data/GSE87073 Normalized.Filtered(ID).Annotated.Data.csv")
GSE87073_dataset <- GSE87073[,3:13]
names(GSE87073_dataset)[1] <- "Symbol"
sum(duplicated(GSE87073_dataset$Symbol))
targets_GSE87073 <- as.data.frame(matrix(NA,10,2))
names(targets_GSE87073) <- c("sample","condition")
targets_GSE87073$sample <- names(GSE87073[,-c(1:3)])
targets_GSE87073$condition <- c("HD","HD","HD","HD","HD","MM","MM","MM","MM","MM")
ls()
rm(GSE36474, GSE46053_Coculture, GSE78235, GSE80608, GSE87073)
##
targets <- list(targets_GSE36474, targets_GSE46053_Coculture, targets_GSE78235, targets_GSE80608,targets_GSE87073)
targets <- rbindlist(targets)
rm(targets_GSE36474, targets_GSE46053_Coculture, targets_GSE78235, targets_GSE80608,targets_GSE87073)
normalized_counts <- Reduce(function(...) merge(..., all=TRUE, by="Symbol"), list(GSE36474_dataset, GSE46053_Coculture_dataset, GSE78235_dataset, GSE80608_dataset, GSE87073_dataset))
rownames(normalized_counts) <- normalized_counts$Symbol
sum(duplicated(normalized_counts$Symbol))
normalized_counts$Symbol <- NULL
rm(GSE36474_dataset, GSE46053_Coculture_dataset, GSE78235_dataset, GSE80608_dataset, GSE87073_dataset)
# load bmsc meta-analysis data
load("data/data_string_bmsc_BMSC_220613.RData")
# load pc meta-analysis data
load("data/data_string_PC_BMSC_220613.RData")
# load bmsc meta-analysis data
load("data/data_string_PC_BMSC_220613.RData")
View(merged_analysis_BMSC_5DS_ID_all)
bmsc_meta.analysis <- merged_analysis_BMSC_5DS_ID_all[,c(18,3)]
sum(duplicated(bmsc_meta.analysis$hgnc_symbol))
bmsc_meta.analysis <- data.frame(bmsc_meta.analysis %>%
group_by(hgnc_symbol) %>%
summarise_all(funs(max)))
bmsc_meta.analysis_symbol <- bmsc_meta.analysis$hgnc_symbol
# filter normalized counts file by genes in bmsc meta-analysis
normalized_counts <- normalized_counts[bmsc_meta.analysis_symbol, ]
normalized_counts$Symbol <- rownames(normalized_counts)
sum(duplicated(normalized_counts$Symbol))
# write files
write.csv(targets,"data/bmsc/targets.csv", row.names = FALSE)
# write files
write.csv(targets,"data/targets.csv", row.names = FALSE)
write.csv(normalized_counts,"data/normalized_counts.csv", row.names = FALSE)
write.csv(bmsc_meta.analysis,"data/bmsc_meta.analysis.csv", row.names = FALSE)
## We read the normalised counts and the experimental design
Normalised_counts <- read.csv("data/bmsc/normalized_counts.csv")
## We read the normalised counts and the experimental design
Normalised_counts <- read.csv("data/normalized_counts.csv")
Experimental_design <- read.csv("data/targets.csv")
## We read the results from the differential analysis.
ttop_KOvsWT <- read.csv("data/bmsc_meta.analysis.csv")
Normalised_counts_matrix <- Normalised_counts %>%
dplyr::mutate_if(~ any(is.na(.x)),~ ifelse(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "Symbol") %>%
as.matrix()
ttop_KOvsWT_matrix <- ttop_KOvsWT %>%
dplyr::select(hgnc_symbol, effectSize) %>%
dplyr::filter(!is.na(effectSize)) %>%
column_to_rownames(var = "hgnc_symbol") %>%
as.matrix()
PathwayActivity_counts <- progeny(Normalised_counts_matrix, scale=TRUE,
organism="Human", top = 100)
Activity_counts <- as.vector(PathwayActivity_counts)
paletteLength <- 100
myColor <-
colorRampPalette(c("darkblue", "whitesmoke","indianred"))(paletteLength)
progenyBreaks <- c(seq(min(Activity_counts), 0,
length.out=ceiling(paletteLength/2) + 1),
seq(max(Activity_counts)/paletteLength,
max(Activity_counts),
length.out=floor(paletteLength/2)))
progeny_hmap <- pheatmap(t(PathwayActivity_counts),fontsize=14,
fontsize_row = 10, fontsize_col = 10,
color=myColor, breaks = progenyBreaks,
main = "PROGENy (100)", angle_col = 45,
treeheight_col = 0,  border_color = NA)
PathwayActivity_zscore <- progeny(ttop_KOvsWT_matrix,
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = TRUE) %>%
t()
colnames(PathwayActivity_zscore) <- "NES"
PathwayActivity_zscore_df <- as.data.frame(PathwayActivity_zscore) %>%
rownames_to_column(var = "Pathway") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Pathway = factor(Pathway))
ggplot(PathwayActivity_zscore_df,aes(x = reorder(Pathway, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Pathways")
prog_matrix <- getModel("Human", top=100) %>%
as.data.frame()  %>%
tibble::rownames_to_column("GeneID")
ttop_KOvsWT_df <- ttop_KOvsWT_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("GeneID")
scat_plots <- progeny::progenyScatter(df = ttop_KOvsWT_df,
weight_matrix = prog_matrix,
statName = "t_values", verbose = FALSE)
plot(scat_plots[[1]]$`MAPK`)
PathwayActivity_CARNIVALinput <- progeny(ttop_KOvsWT_matrix,
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = FALSE) %>%
t () %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "Pathway")
colnames(PathwayActivity_CARNIVALinput)[2] <- "score"
write_csv(PathwayActivity_CARNIVALinput,
"results/PathwayActivity_CARNIVALinput.csv")
## Getting Started
## We read the normalised counts and the experimental design
Normalised_counts <- read.csv("data/normalized_counts.csv")
Experimental_design <- read.csv("data/targets.csv")
## We read the results from the differential analysis.
ttop_KOvsWT <- read.csv("data/bmsc_meta.analysis.csv")
Normalised_counts_matrix <- Normalised_counts %>%
dplyr::mutate_if(~ any(is.na(.x)),~ ifelse(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "Symbol") %>%
as.matrix()
ttop_KOvsWT_matrix <- ttop_KOvsWT %>%
dplyr::select(hgnc_symbol, effectSize) %>%
dplyr::filter(!is.na(effectSize)) %>%
column_to_rownames(var = "hgnc_symbol") %>%
as.matrix()
## We load Dorothea Regulons
data(dorothea_hs, package = "dorothea")
regulons <- dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B","C"))
tf_activities_stat <- dorothea::run_viper(ttop_KOvsWT_matrix, regulons,
options =  list(minsize = 5, eset.filter = FALSE,
cores = 1, verbose = FALSE, nes = TRUE))
tf_activities_stat_top25 <- tf_activities_stat %>%
as.data.frame() %>%
rownames_to_column(var = "GeneID") %>%
dplyr::rename(NES = "effectSize") %>%
dplyr::top_n(25, wt = abs(NES)) %>%
dplyr::arrange(NES) %>%
dplyr::mutate(GeneID = factor(GeneID))
ggplot(tf_activities_stat_top25,aes(x = reorder(GeneID, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Transcription Factors")
tf_activities_CARNIVALinput<- tf_activities_stat %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "TF")
write_csv(tf_activities_CARNIVALinput, "results/TFActivity_CARNIVALinput.csv")
tf_activities_counts <-
dorothea::run_viper(Normalised_counts_matrix, regulons,
options =  list(minsize = 5, eset.filter = FALSE,
cores = 1, verbose = FALSE, method = c("scale")))
tf_activities_counts_filter <- tf_activities_counts %>%
as.data.frame() %>%
rownames_to_column(var = "GeneID") %>%
dplyr::filter(GeneID %in% tf_activities_stat_top25$GeneID) %>%
column_to_rownames(var = "GeneID") %>%
as.matrix()
tf_activities_vector <- as.vector(tf_activities_counts_filter)
paletteLength <- 100
myColor <-
colorRampPalette(c("darkblue", "whitesmoke","indianred"))(paletteLength)
dorotheaBreaks <- c(seq(min(tf_activities_vector), 0,
length.out=ceiling(paletteLength/2) + 1),
seq(max(tf_activities_vector)/paletteLength,
max(tf_activities_vector),
length.out=floor(paletteLength/2)))
dorothea_hmap <- pheatmap(tf_activities_counts_filter,
fontsize=14, fontsize_row = 8, fontsize_col = 8,
color=myColor, breaks = dorotheaBreaks,
main = "Dorothea ABC", angle_col = 45,
treeheight_col = 0,  border_color = NA)
## We read the normalised counts and the experimental design
tf_activities <- read_csv("results/TFActivity_CARNIVALinput.csv")
PathwayActivity <- read_csv("results/PathwayActivity_CARNIVALinput.csv")
omniR <- import_omnipath_interactions()
# signed and directed
omnipath_sd <- omniR %>% dplyr::filter(consensus_direction == 1 &
(consensus_stimulation == 1 |
consensus_inhibition == 1
))
# changing 0/1 criteria in consensus_stimulation/inhibition to -1/1
omnipath_sd$consensus_stimulation[which( omnipath_sd$consensus_stimulation == 0)] = -1
omnipath_sd$consensus_inhibition[which( omnipath_sd$consensus_inhibition == 1)] = -1
omnipath_sd$consensus_inhibition[which( omnipath_sd$consensus_inhibition == 0)] = 1
# check consistency on consensus sign and select only those in a SIF format
sif <- omnipath_sd[,c('source_genesymbol', 'consensus_stimulation', 'consensus_inhibition', 'target_genesymbol')] %>%
dplyr::filter(consensus_stimulation==consensus_inhibition) %>%
unique.data.frame()
sif$consensus_stimulation <- NULL
colnames(sif) <- c('source', 'interaction', 'target')
# remove complexes
sif$source <- gsub(":", "_", sif$source)
sif$target <- gsub(":", "_", sif$target)
sif <- sif[!grepl("_",sif$source),]
sif <- sif[!grepl("_",sif$target),]
#save SIF
write_tsv(sif, "results/omnipath_carnival.tsv")
# dorothea for CARNIVAL
tf_activities_carnival <- data.frame(tf_activities, stringsAsFactors = F)
rownames(tf_activities_carnival) <- tf_activities$TF
tf_activities_carnival$TF <- NULL
tfList = generateTFList(tf_activities_carnival, top=50, access_idx = 1)
# progeny for CARNIVAL
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
PathwayActivity_carnival <- data.frame(PathwayActivity, stringsAsFactors = F)
rownames(PathwayActivity_carnival) <- PathwayActivity_carnival$Pathway
PathwayActivity_carnival$Pathway <- NULL
progenylist = assignPROGENyScores(progeny = t(PathwayActivity_carnival),
progenyMembers = progenyMembers,
id = "gene",
access_idx = 1)
## Running CARNIVAL
load("data/data_string_bmsc_BMSC_220613.RData")
# create a subset dataframe that contains DEG of MM-bmsc extracellular ligands
mm_bmsc_ligands_ex <- merged_analysis_BMSC_5DS_ID_all[merged_analysis_BMSC_5DS_ID_all$ligand == TRUE & merged_analysis_BMSC_5DS_ID_all$num_sources_extracell > 0, ]
View(mm_bmsc_ligands_ex)
View(bmsc_meta.analysis)
mm_bmsc_ligands_ex <- mm_bmsc_ligands_ex[,c(18,3)]
View(mm_bmsc_ligands_ex)
mm_bmsc_ligands_ex <- data.frame(mm_bmsc_ligands_ex %>%
group_by(hgnc_symbol) %>%
summarise_all(funs(max)))
rownames(mm_bmsc_ligands_ex) <- mm_bmsc_ligands_ex$hgnc_symbol
mm_bmsc_ligands_ex$hgnc_symbol <- NULL
mm_bmsc_ligands_ex$effectSize[mm_bmsc_ligands_ex$effectSize < 0] <- -1
mm_bmsc_ligands_ex$effectSize[mm_bmsc_ligands_ex$effectSize > 0] <- 1
mm_bmsc_ligands_ex <-as.data.frame(t(mm_bmsc_ligands_ex))
# get initial nodes
iniMTX = base::setdiff(sif$source, sif$target)
iniciators = base::data.frame(base::matrix(data = NaN, nrow = 1, ncol = length(iniMTX)), stringsAsFactors = F)
colnames(iniciators) = iniMTX
iniciators = mm_bmsc_ligands_ex
# run carnival
carnival_result = runCARNIVAL( inputObj= iniciators,
measObj = tfList$effectSize,
netObj = sif,
weightObj = progenylist$score,
# solverPath = "/Applications/CPLEX_Studio_Community221/cplex/bin/x86-64_osx/cplex",
# solverPath = "cbc-osx/cbc",
solverPath = "/Library/gurobi952/macos_universal2/bin/gurobi_cl",
# solver = "cplex",
# solver = "cbc",
solver = 'gurobi',
timelimit=3600,
mipGAP=0,
poolrelGAP=0 )
#transform to data.frame
carnival_result$weightedSIF <- data.frame(carnival_result$weightedSIF, stringsAsFactors = F)
carnival_result$weightedSIF$Sign <- as.numeric(carnival_result$weightedSIF$Sign)
carnival_result$weightedSIF$Weight <- as.numeric(carnival_result$weightedSIF$Weight)
carnival_result$weightedSIF$Weight <- as.numeric(carnival_result$weightedSIF$Weight)
carnival_result$nodesAttributes <- data.frame(carnival_result$nodesAttributes, stringsAsFactors = F)
carnival_result$nodesAttributes$ZeroAct <- as.numeric(carnival_result$nodesAttributes$ZeroAct)
carnival_result$nodesAttributes$UpAct <- as.numeric(carnival_result$nodesAttributes$UpAct)
carnival_result$nodesAttributes$DownAct <- as.numeric(carnival_result$nodesAttributes$DownAct)
carnival_result$nodesAttributes$AvgAct <- as.numeric(carnival_result$nodesAttributes$AvgAct)
# filer weightedSIF based on weight
df_weight <- carnival_result[["weightedSIF"]]
df_weight <- df_weight[df_weight$Weight > 0,]
carnival_result[["weightedSIF"]] <- df_weight
df_attributes <- carnival_result[["nodesAttributes"]]
df_attributes <- df_attributes[df_attributes$ZeroAct == 0,]
carnival_result[["nodesAttributes"]] <- df_attributes
View(carnival_result)
View(carnival_result[["weightedSIF"]])
View(carnival_result[["nodesAttributes"]])
View(carnival_result[["weightedSIF"]])
saveRDS(carnival_result,"results/bmsc_carnival_result.rds")
# export to cytoscape
SIF <- as.data.frame(carnival_result$weightedSIF)
ATT <- as.data.frame(carnival_result$nodesAttributes)
ATT <- left_join(ATT, merged_analysis_bmsc_8DS_ID_all[ , c("hgnc_symbol","effectSize", "fisherFDRMin")], by = c("Node"="hgnc_symbol"), all.x = TRUE)
ATT <- left_join(ATT, merged_analysis_BMSC_5DS_ID_all[ , c("hgnc_symbol","effectSize", "fisherFDRMin")], by = c("Node"="hgnc_symbol"), all.x = TRUE)
View(ATT)
ATT[is.na(ATT)] <- " "
write_csv(SIF, file = "results/BMSC_SIF.csv")
write_csv(ATT, file = "results/BMSC_ATT.csv")
#read CARNIVAL results
carnival_result = readRDS("results/bmsc_carnival_result.rds")
carnival_sample_resolution = readRDS("results/carnival_sample_resolution.rds")
pkn = read_tsv("results/omnipath_carnival.tsv")
#read CARNIVAL results
carnival_result = readRDS("results/bmsc_carnival_result.rds")
#carnival_sample_resolution = readRDS("results/carnival_sample_resolution.rds")
pkn = read_tsv("results/omnipath_carnival.tsv")
# Load pathways
pathways = gmt_to_csv("data/c2.cp.v7.1.symbols.gmt")
# Extract nodes and background
nodes_carnival = extractCARNIVALnodes(carnival_result)
# Run GSA hyper Geometric test
sig_pathways <- runGSAhyper(genes = nodes_carnival$sucesses,
universe = nodes_carnival$bg, gsc = loadGSC(pathways))
sig_pathways_df <- as.data.frame(sig_pathways$resTab)  %>%
tibble::rownames_to_column(var = "pathway")
#data for plotting
PathwaysSelect <- sig_pathways_df %>%
dplyr::select(pathway, `p-value`, `Adjusted p-value`) %>%
dplyr::filter(`Adjusted p-value` <= 0.01) %>%
dplyr::rename(pvalue = `p-value`, AdjPvalu = `Adjusted p-value`) %>%
dplyr::mutate(pathway = as.factor(pathway))
PathwaysSelect <- data.frame(t(apply(PathwaysSelect, 1, function(r){
aux = unlist(strsplit( sub("_",";", r["pathway"]), ";" ))
r["pathway"] = gsub("_", " ", aux[2])
return(c(r, "source" = aux[1]))
})))
colnames(PathwaysSelect) = c("pathway", "pvalue", "AdjPvalu", "source")
PathwaysSelect$AdjPvalu = as.numeric(PathwaysSelect$AdjPvalu)
ggdata = PathwaysSelect %>%
dplyr::filter(AdjPvalu <= 0.05) %>%
dplyr::group_by(source) %>%
dplyr::arrange(AdjPvalu) %>%
dplyr::slice(1:5)
# Visualize top results
ggplot(ggdata, aes(y = reorder(pathway, AdjPvalu), x = -log10(AdjPvalu)), color = source) +
geom_bar(stat = "identity") +
facet_grid(source ~ ., scales="free_y") +
scale_x_continuous(
expand = c(0.01, 0.01),
limits = c(0, ceiling(max(-log10(PathwaysSelect$AdjPvalu)))),
breaks = seq(floor(min(-log10(PathwaysSelect$AdjPvalu))), ceiling(max(-log10(PathwaysSelect$AdjPvalu))), 1),
labels = math_format(10^-.x)
) +
annotation_logticks(sides = "bt") +
theme_bw() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.y = element_text(size = 6)) +
ylab("")
View(PathwayActivity_CARNIVALinput)
View(PathwayActivity)
View(PathwaysSelect)
View(PathwaysSelect)
